from aiogram import Router, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from tgbot.models.config_reader import Settings
from tgbot.services.crud.car_request import CarRequest
from tgbot.services.crud.user import User as UserCrud
from tgbot.states.car_filter import CarFilterForm


async def start_filter(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("üîπ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    await state.set_state(CarFilterForm.car_info)
    await call.answer()


async def car_info_writen(msg: Message, state: FSMContext):
    car_info = msg.text
    await state.update_data(car_info=car_info)
    await msg.answer("üîπ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç")
    await state.set_state(CarFilterForm.price)


async def process_filter_price(msg: Message, state: FSMContext):
    price = msg.text
    await state.update_data(price=price)
    await msg.answer("üîπ –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é")
    await state.set_state(CarFilterForm.additional_details)


async def process_filter_notes(msg: Message, db: AsyncSession, state: FSMContext, config: Settings):
    additional_details = msg.text
    data = await state.update_data(additional_details=additional_details)
    car_req_crud = CarRequest(db=db)
    req_obj = car_req_crud.insert_car_request(tg_id=msg.from_user.id,
                                              car_info=data['car_info'],
                                              price=data['price'],
                                              additional_details=additional_details,
                                              )
    await db.commit()
    await db.refresh(req_obj)
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç ‚¨ÜÔ∏è",
              url=f"tg://resolve?domain={config.BOT_USERNAME}&start={req_obj.id}")
    user_crud = UserCrud(db=db)
    user = await user_crud.get_user(msg.from_user.id)
    await msg.bot.send_message(
        chat_id=config.ADMIN_CHAT_ID,
        text=f"üîπ –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞\n"
             f"<b>–§–ò–û:</b> {user.full_name}\n"
             f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{user.phone_number}</code>\n\n"
             f"<b>–î–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ:</b> {data['car_info']}\n"
             f"<b>–¶–µ–Ω–∞:</b> {data['price']}\n"
             f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {additional_details}\n",
        reply_markup=kb.as_markup()
    )
    await msg.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–∫–æ—Ä–æ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã")


def register_car_filter_handlers(dp: Dispatcher):
    router = Router(name=__name__)
    router.callback_query.register(start_filter, F.data == "car_request")
    router.message.register(car_info_writen, CarFilterForm.car_info)
    router.message.register(process_filter_price, CarFilterForm.price)
    router.message.register(process_filter_notes, CarFilterForm.additional_details)
    dp.include_router(router)
